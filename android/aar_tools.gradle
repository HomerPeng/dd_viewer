import java.util.zip.ZipEntry
import java.util.zip.ZipFile

// 拷贝aar的方法
static aarFileCopy(String srcPath,String desPath) {
    System.out.println("梁典典脚本执行: 开始复制aar依赖,原始路径:${srcPath}, 拷贝到路径:${desPath}")
    try {
        FileInputStream fis = new FileInputStream(srcPath)
        FileOutputStream fos = new FileOutputStream(desPath)
        byte[] data = new byte[1024*8]
        int len = 0
        while ((len = fis.read(data))!=-1) {
            fos.write(data,0,len)
        }
        fis.close()
        fos.close()
    }catch(Exception e) {
        e.printStackTrace()
    }
}
//把aar拷贝进入主项目的方法 com.example.android_control换成你自己的插件名
copyAar2Host('shop.itbug.dd_viewer')
void copyAar2Host(String pluginGroup) {
    Project currentProject = null
    Project appProject = null
    rootProject.allprojects.each {
        p->
            boolean  isApp = p.plugins.hasPlugin("com.android.application")
            println("梁典典脚本执行:依赖名字>>${p.name} 是否本地:${isApp}")
            if (p.group == pluginGroup) {
                currentProject = p
                println("循环插件名字: $currentProject")
            }
            if(isApp) {
                appProject = p
                println("本地依赖名字:${p.name}")
            }
    }
    Set<File> aarFiles = new HashSet<File>()
    if (appProject != null && currentProject != null) {
        File libs = new File("${currentProject.projectDir}","libs")
        if(libs.isDirectory()) {
            libs.listFiles().each {
                f->
                    if(f.name.endsWith(".aar")) {
                        println("Success: aar依赖拷贝完成!${f.name}")
                        aarFiles.add(f)
                    }

                    if(f.name.endsWith(".jar")) {
                        println("Success: jar依赖拷贝完成!${f.name}")
                        aarFiles.add(f)
                    }

            }
        }
        if (!aarFiles.isEmpty()) {
            File applibs = new File("${appProject.projectDir}${File.separator}libs")
            if(!applibs.isDirectory()) {
                applibs.mkdirs()
            }
            aarFiles.each {
                f->
                    File copyAar = new File("${appProject.projectDir}${File.separator}libs",f.name)
                    if(!copyAar.exists()) {
                        copyAar.createNewFile()
                        aarFileCopy(f.path,copyAar.path)
                    } else {

                    }
            }
            appProject.dependencies {
                implementation fileTree(dir:"${appProject.projectDir}${File.separator}libs",include:["*.jar","*.aar"])
            }
        }
    }
}

repositories{
    flatDir {
        dirs 'libs'
    }
}

